观察者模式（发布-订阅模式）
	定义了一种一对多的依赖关系，让多个观察者对象同事监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使他们能够自动更新自己。

使用原因：
	将一个系统分割成一系列相互协作的类有一个不好的副作用，那就是需要维护相互对象之间的一致性。我们不希望为了维持一致性而使各类紧密耦合，这样会给
	维护、拓展和重用都带来不便。
	
	1.当一个对象的改变需要同时改变其他对象，而且他不知道具体有多少对象有待改变时，应考虑使用观察者模式
	2.当一个抽象模型有两个方面，其中一方面依赖另一个方面，这时用观察者模式可以将这两者封装在独立的对象中使他们各自独立的改变和复用。
	
观察者模式所做的工作就是在解除耦合。让耦合双方都依赖抽象，而不是依赖于具体。从而使得各自的变化都不会影响另一边的变化。


ConcreteObserver实现了Observer抽象观察者类，实现了update()方法
ConcreteSubject实现了Subject抽象通知者
但现实中，不存在每个观察者都继承Observer类实现update()方法，在.Net中存在委托机制来解决。java中可以使用监听器来实现。